services:
  nginx_app:
    image: "chishin/nginx-proxy-manager-zh:release"
    restart: always
    ports:
      - "8000:80"
      - "8100:81"
      - "44300:443"
    networks:
      - network_beng003
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt

  alice_dag_scheduler:
    image: crpi-84gohwg2zpoyckdg.cn-hangzhou.personal.cr.aliyuncs.com/beng003_docker/dagscheduler-backend:latest # 这里指定构建的镜像名称
    container_name: alice_dag_scheduler
    # ports:
    #   - "8088:9099"
    networks:
      - network_beng003
    environment:
      - APP_ENV=alice
    depends_on:
      alice_mysql:
        condition: service_healthy
      alice_redis:
        condition: service_healthy
      alice_operator:
        condition: service_started

  alice_operator:
    image: crpi-84gohwg2zpoyckdg.cn-hangzhou.personal.cr.aliyuncs.com/beng003_docker/operator:latest # 这里指定构建的镜像名称
    container_name: alice_operator
    # volumes:
    #   - ../../:/app # 宿主机路径:容器路径
    shm_size: 1gb
    networks:
      network_beng003:
        ipv4_address: 192.168.0.10
    environment:
      - APP_ENV=alice

  alice_mysql:
    image: mysql:8.0
    restart: always
    container_name: alice_mysql
    networks:
      - network_beng003
    # ports:
    #   - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=12341234
      - MYSQL_DATABASE=DAGScheduler
      # - TZ=Asia/Shanghai
    volumes:
      - alice_mysql_data:/var/lib/mysql
      # - ../sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uroot", "-p12341234"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s # 给MySQL启动的缓冲时间

  alice_redis:
    image: redis:latest
    container_name: alice_redis
    networks:
      - network_beng003
    # ports:
    #   - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  bob_dag_scheduler:
    image: crpi-84gohwg2zpoyckdg.cn-hangzhou.personal.cr.aliyuncs.com/beng003_docker/dagscheduler-backend:latest # 这里指定构建的镜像名称
    container_name: bob_dag_scheduler
    # ports:
    #   - "8088:9099"
    networks:
      - network_beng003
    environment:
      - APP_ENV=bob
    depends_on:
      bob_mysql:
        condition: service_healthy
      bob_redis:
        condition: service_healthy
      bob_operator:
        condition: service_started

  bob_operator:
    image: crpi-84gohwg2zpoyckdg.cn-hangzhou.personal.cr.aliyuncs.com/beng003_docker/operator:latest # 这里指定构建的镜像名称
    container_name: bob_operator
    # volumes:
    #   - ../../:/app # 宿主机路径:容器路径
    shm_size: 1gb
    networks:
      network_beng003:
        ipv4_address: 192.168.0.11
    environment:
      - APP_ENV=bob

  bob_mysql:
    image: mysql:8.0
    restart: always
    container_name: bob_mysql
    networks:
      - network_beng003
    # ports:
    #   - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=12341234
      - MYSQL_DATABASE=DAGScheduler
      # - TZ=Asia/Shanghai
    volumes:
      - bob_mysql_data:/var/lib/mysql
      # - ../sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uroot", "-p12341234"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 10s # 给MySQL启动的缓冲时间

  bob_redis:
    image: redis:latest
    container_name: bob_redis
    networks:
      - network_beng003
    # ports:
    #   - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  alice_mysql_data:
  bob_mysql_data:

networks:
  network_beng003:
    name: network_beng003 # 强制指定名称
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.1
# services:
#   app:
#     image: 'docker.io/jc21/nginx-proxy-manager:latest'
#     restart: unless-stopped
#     ports:
#       - '80:80'
#       - '81:81'
#       - '443:443'
#     volumes:
#       - ./data:/data
#       - ./letsencrypt:/etc/letsencrypt
